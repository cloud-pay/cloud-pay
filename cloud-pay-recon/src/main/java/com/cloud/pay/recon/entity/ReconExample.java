package com.cloud.pay.recon.entity;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class ReconExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public ReconExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andAccountDateIsNull() {
            addCriterion("ACCOUNT_DATE is null");
            return (Criteria) this;
        }

        public Criteria andAccountDateIsNotNull() {
            addCriterion("ACCOUNT_DATE is not null");
            return (Criteria) this;
        }

        public Criteria andAccountDateEqualTo(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE =", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE <>", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateGreaterThan(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE >", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE >=", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateLessThan(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE <", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ACCOUNT_DATE <=", value, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateIn(List<Date> values) {
            addCriterionForJDBCDate("ACCOUNT_DATE in", values, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("ACCOUNT_DATE not in", values, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ACCOUNT_DATE between", value1, value2, "accountDate");
            return (Criteria) this;
        }

        public Criteria andAccountDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ACCOUNT_DATE not between", value1, value2, "accountDate");
            return (Criteria) this;
        }

        public Criteria andChannelIdIsNull() {
            addCriterion("CHANNEL_ID is null");
            return (Criteria) this;
        }

        public Criteria andChannelIdIsNotNull() {
            addCriterion("CHANNEL_ID is not null");
            return (Criteria) this;
        }

        public Criteria andChannelIdEqualTo(Integer value) {
            addCriterion("CHANNEL_ID =", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdNotEqualTo(Integer value) {
            addCriterion("CHANNEL_ID <>", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdGreaterThan(Integer value) {
            addCriterion("CHANNEL_ID >", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("CHANNEL_ID >=", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdLessThan(Integer value) {
            addCriterion("CHANNEL_ID <", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdLessThanOrEqualTo(Integer value) {
            addCriterion("CHANNEL_ID <=", value, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdIn(List<Integer> values) {
            addCriterion("CHANNEL_ID in", values, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdNotIn(List<Integer> values) {
            addCriterion("CHANNEL_ID not in", values, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdBetween(Integer value1, Integer value2) {
            addCriterion("CHANNEL_ID between", value1, value2, "channelId");
            return (Criteria) this;
        }

        public Criteria andChannelIdNotBetween(Integer value1, Integer value2) {
            addCriterion("CHANNEL_ID not between", value1, value2, "channelId");
            return (Criteria) this;
        }

        public Criteria andTradeTotalIsNull() {
            addCriterion("TRADE_TOTAL is null");
            return (Criteria) this;
        }

        public Criteria andTradeTotalIsNotNull() {
            addCriterion("TRADE_TOTAL is not null");
            return (Criteria) this;
        }

        public Criteria andTradeTotalEqualTo(Integer value) {
            addCriterion("TRADE_TOTAL =", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalNotEqualTo(Integer value) {
            addCriterion("TRADE_TOTAL <>", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalGreaterThan(Integer value) {
            addCriterion("TRADE_TOTAL >", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalGreaterThanOrEqualTo(Integer value) {
            addCriterion("TRADE_TOTAL >=", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalLessThan(Integer value) {
            addCriterion("TRADE_TOTAL <", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalLessThanOrEqualTo(Integer value) {
            addCriterion("TRADE_TOTAL <=", value, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalIn(List<Integer> values) {
            addCriterion("TRADE_TOTAL in", values, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalNotIn(List<Integer> values) {
            addCriterion("TRADE_TOTAL not in", values, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalBetween(Integer value1, Integer value2) {
            addCriterion("TRADE_TOTAL between", value1, value2, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeTotalNotBetween(Integer value1, Integer value2) {
            addCriterion("TRADE_TOTAL not between", value1, value2, "tradeTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalIsNull() {
            addCriterion("TRADE_AMT_TOTAL is null");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalIsNotNull() {
            addCriterion("TRADE_AMT_TOTAL is not null");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalEqualTo(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL =", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalNotEqualTo(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL <>", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalGreaterThan(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL >", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL >=", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalLessThan(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL <", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalLessThanOrEqualTo(BigDecimal value) {
            addCriterion("TRADE_AMT_TOTAL <=", value, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalIn(List<BigDecimal> values) {
            addCriterion("TRADE_AMT_TOTAL in", values, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalNotIn(List<BigDecimal> values) {
            addCriterion("TRADE_AMT_TOTAL not in", values, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("TRADE_AMT_TOTAL between", value1, value2, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andTradeAmtTotalNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("TRADE_AMT_TOTAL not between", value1, value2, "tradeAmtTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalIsNull() {
            addCriterion("EXCEPTION_TOTAL is null");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalIsNotNull() {
            addCriterion("EXCEPTION_TOTAL is not null");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalEqualTo(Integer value) {
            addCriterion("EXCEPTION_TOTAL =", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalNotEqualTo(Integer value) {
            addCriterion("EXCEPTION_TOTAL <>", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalGreaterThan(Integer value) {
            addCriterion("EXCEPTION_TOTAL >", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalGreaterThanOrEqualTo(Integer value) {
            addCriterion("EXCEPTION_TOTAL >=", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalLessThan(Integer value) {
            addCriterion("EXCEPTION_TOTAL <", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalLessThanOrEqualTo(Integer value) {
            addCriterion("EXCEPTION_TOTAL <=", value, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalIn(List<Integer> values) {
            addCriterion("EXCEPTION_TOTAL in", values, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalNotIn(List<Integer> values) {
            addCriterion("EXCEPTION_TOTAL not in", values, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalBetween(Integer value1, Integer value2) {
            addCriterion("EXCEPTION_TOTAL between", value1, value2, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andExceptionTotalNotBetween(Integer value1, Integer value2) {
            addCriterion("EXCEPTION_TOTAL not between", value1, value2, "exceptionTotal");
            return (Criteria) this;
        }

        public Criteria andReconStatusIsNull() {
            addCriterion("RECON_STATUS is null");
            return (Criteria) this;
        }

        public Criteria andReconStatusIsNotNull() {
            addCriterion("RECON_STATUS is not null");
            return (Criteria) this;
        }

        public Criteria andReconStatusEqualTo(Integer value) {
            addCriterion("RECON_STATUS =", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusNotEqualTo(Integer value) {
            addCriterion("RECON_STATUS <>", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusGreaterThan(Integer value) {
            addCriterion("RECON_STATUS >", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("RECON_STATUS >=", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusLessThan(Integer value) {
            addCriterion("RECON_STATUS <", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusLessThanOrEqualTo(Integer value) {
            addCriterion("RECON_STATUS <=", value, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusIn(List<Integer> values) {
            addCriterion("RECON_STATUS in", values, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusNotIn(List<Integer> values) {
            addCriterion("RECON_STATUS not in", values, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusBetween(Integer value1, Integer value2) {
            addCriterion("RECON_STATUS between", value1, value2, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andReconStatusNotBetween(Integer value1, Integer value2) {
            addCriterion("RECON_STATUS not between", value1, value2, "reconStatus");
            return (Criteria) this;
        }

        public Criteria andFailResonIsNull() {
            addCriterion("FAIL_RESON is null");
            return (Criteria) this;
        }

        public Criteria andFailResonIsNotNull() {
            addCriterion("FAIL_RESON is not null");
            return (Criteria) this;
        }

        public Criteria andFailResonEqualTo(String value) {
            addCriterion("FAIL_RESON =", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonNotEqualTo(String value) {
            addCriterion("FAIL_RESON <>", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonGreaterThan(String value) {
            addCriterion("FAIL_RESON >", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonGreaterThanOrEqualTo(String value) {
            addCriterion("FAIL_RESON >=", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonLessThan(String value) {
            addCriterion("FAIL_RESON <", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonLessThanOrEqualTo(String value) {
            addCriterion("FAIL_RESON <=", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonLike(String value) {
            addCriterion("FAIL_RESON like", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonNotLike(String value) {
            addCriterion("FAIL_RESON not like", value, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonIn(List<String> values) {
            addCriterion("FAIL_RESON in", values, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonNotIn(List<String> values) {
            addCriterion("FAIL_RESON not in", values, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonBetween(String value1, String value2) {
            addCriterion("FAIL_RESON between", value1, value2, "failReson");
            return (Criteria) this;
        }

        public Criteria andFailResonNotBetween(String value1, String value2) {
            addCriterion("FAIL_RESON not between", value1, value2, "failReson");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("CREATE_TIME is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("CREATE_TIME is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Date value) {
            addCriterion("CREATE_TIME =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Date value) {
            addCriterion("CREATE_TIME <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Date value) {
            addCriterion("CREATE_TIME >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("CREATE_TIME >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Date value) {
            addCriterion("CREATE_TIME <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
            addCriterion("CREATE_TIME <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Date> values) {
            addCriterion("CREATE_TIME in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Date> values) {
            addCriterion("CREATE_TIME not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Date value1, Date value2) {
            addCriterion("CREATE_TIME between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
            addCriterion("CREATE_TIME not between", value1, value2, "createTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_recon
     *
     * @mbggenerated do_not_delete_during_merge Sun Sep 02 17:22:42 CST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_recon
     *
     * @mbggenerated Sun Sep 02 17:22:42 CST 2018
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}